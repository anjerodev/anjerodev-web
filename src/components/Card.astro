---
import ExternalLinkIcon from '@/icons/external-link.svg'
interface Props {
  id: string
  title: string
  body: string
  href?: string
  isPrivate?: boolean
  hot?: boolean
}

const { id, href, title, body, isPrivate, hot } = Astro.props
---

<div
  class="card bg-card from-muted/5 to-muted/60 flex flex-col rounded-lg border bg-gradient-to-br p-3"
>
  <div class="mb-4 grow">
    <div class="flex flex-wrap items-start gap-3">
      <h2 class="mb-2 text-xl font-bold">
        {title}
      </h2>
      {
        isPrivate && (
          <span class="text-foreground/70 rounded-full border px-2 py-px text-sm">
            Private
          </span>
        )
      }
      {
        hot && (
          <span class="rounded-full border border-rose-500 bg-rose-500/10 px-2 py-px text-sm text-rose-500">
            Hot
          </span>
        )
      }
    </div>
    <p class="text-muted-foreground">
      {body}
    </p>
  </div>
  {
    !isPrivate && (
      <a
        href={href || `/projetcs/${id}`}
        target="_blank"
        class="border-border/50 text-muted-foreground hover:border-border hover:bg-muted/50 hover:text-foreground flex w-fit items-center gap-3 rounded border bg-transparent px-2 py-1 transition-colors duration-200 hover:shadow-md active:shadow-none"
      >
        Go to project
        {href && <ExternalLinkIcon class="size-4" />}
      </a>
    )
  }
</div>

<style>
  .card {
    box-shadow:
      0 1px 3px 0 rgba(0, 0, 0, 0.1),
      0 1px 2px 0 rgba(0, 0, 0, 0.06);
    transform: perspective(1000px) rotate3d(0, 0, 0, 0);
    transition:
      transform 0.3s ease-out,
      box-shadow 0.3s ease-out;
  }

  .card:hover {
    transition:
      transform 0.15s ease-out,
      box-shadow 0.15s ease-out;
    box-shadow: 0 5px 15px 2px hsl(0, 0%, 0%, 0.1);
  }
</style>

<script>
  document.querySelectorAll('.card').forEach((el) => {
    const card = el as HTMLElement

    function rotateToMouse(e: MouseEvent) {
      const bounds = card.getBoundingClientRect()
      const centerX = bounds.x + bounds.width / 2
      const centerY = bounds.y + bounds.height / 2
      const deltaX = e.clientX - centerX
      const deltaY = e.clientY - centerY
      const rotateX = (deltaY / bounds.height) * 7
      const rotateY = (-deltaX / bounds.width) * 7

      card.style.transform = `
      perspective(1000px)
      scale3d(1.02, 1.02, 1.02)
      rotateX(${rotateX}deg)
      rotateY(${rotateY}deg)
    `
    }

    card.addEventListener('mousemove', rotateToMouse)
    card.addEventListener('mouseleave', () => {
      card.style.transform = 'perspective(1000px) rotate3d(0, 0, 0, 0)'
    })
  })
</script>
